<?php

require_once $config->get('sysRoot').'alpha/util/AlphaMarkdown.inc';

/**
 *
 * A facade class for the Markdown library
 * 
 * @package alpha::util
 * @author John Collins <john@design-ireland.net>
 * @copyright 2009 John Collins
 * @version $Id$ 
 * 
 */
 
class MarkdownFacade {
	/**
	 * The markdown-format content that we will render
	 * 
	 * @var string
	 */	
	private $content;
	
	/**
	 * The business object that stores the content will be rendered to Markdown
	 * 
	 * @var object
	 */
	private $BO = null;
	
	/**
	 * The auto-generated name of the Markdown HTML cache file for the BO
	 * 
	 * @var string
	 */
	private $filename;
	
	/**
	 * The constructor
	 * 
	 * @param object $BO
	 * @package bool $useCache
	 */
	public function __construct($BO, $useCache = true) {
		global $config;
		
		$this->BO = $BO;
		$this->filename = $config->get('sysRoot').'cache/html/'.get_class($this->BO).'_'.$this->BO->getID().'_'.$this->BO->getVersion().'.html';
		
		if(get_class($this->BO) == 'article_object')
			$attachURL = $this->BO->get_attachments_URL();
		else
			$attachURL = "";
		
		if(!$useCache) {
			$this->content = $this->markdown($this->BO->get('content', true), $attachURL);
		}else{
			if ($this->checkCache()) {
				$this->loadCache();
			}else{
				$this->content = $this->markdown($this->BO->get('content', true), $attachURL);
				$this->cache();
			}
		}
	}
	
	/**
	 * Facade method which will invoke our custom markdown class rather than the standard one
	 * 
	 * @return string
	 */
	public function markdown($text, $attachURL="") {
	 	global $config;
	 	
		// Initialize the parser and return the result of its transform method.
		static $parser;
		
		if (!isset($parser)) {
			$parser_class = 'AlphaMarkdown';
			$parser = new $parser_class;
		}
		
		/*
		 * Replace all instances of $attachURL in the text with the actual URL for the article's 
		 * attachment directory
		 */
		$text = str_replace('$attachURL', $attachURL, $text);
		
		/*
		 * Replace all instances of $sysURL in the text with the sysURL setting from config
		 */
		$text = str_replace('$sysURL', $config->get('sysURL'), $text);
		
		// transform text using parser.
		return $parser->transform($text);
	}
	
	/**
	 * Getter for the content
	 * 
	 * @return string
	 */
	public function getContent() {
		return $this->content;
	}
	
	/**
	 * saves the HTML generated by Markdown to the cache directory	 
	 */
	private function cache() {
		// check to ensure that the article is not transient before caching it
		if ($this->BO->getID() != '00000000000') {
			$fp=fopen($this->filename,"w");
			if (!$fp) {
				throw new AlphaException('Failed to open the cache file for writing, directory permissions my not be set correctly!');
			}else{
				flock($fp,2); // locks the file for writting		    
				fwrite($fp,$this->content); 
				flock($fp,3); // unlocks the file
				fclose($fp); //closes the file
			}
		}
	}
	
	/**
	 * Used to check the HTML cache for the BO cache file
	 * 	 
	 * @return bool
	 */
	function checkCache() {
		return file_exists($this->filename);
	}
	
	/**
	 * method to load the content of the cache file to the $content attribute of this object	 
	 */
	function loadCache() {		
		$fp=fopen($this->filename,"r");
		if (!$fp) {
			throw new AlphaException('Failed to open the cache file for reading, directory permissions my not be set correctly!');
		}else{				    
			$this->content = fread($fp, filesize($this->filename));			
			fclose($fp); //closes the file			
		}
	}
}
?>