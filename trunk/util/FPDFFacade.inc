<?php

require_once $config->get('sysRoot').'alpha/util/AlphaFPDF.inc';

/**
 *
 * A facade class for the FDPF library which is used to convert some HTML content provided by the
 * Markdown library to a PDF file using FPDF
 * 
 * @package alpha::util
 * @author John Collins <john@design-ireland.net>
 * @copyright 2009 John Collins
 * @version $Id$
 * 
 */ 
class FPDFFacade {
	/**
	 * The markdown-format content that we will render as a PDF
	 * 
	 * @var string
	 */	
	private $content;
	
	/**
	 * The PDF object that will be generated from the Markdown HTML content
	 * 
	 * @var AlphaFPDF
	 */
	private $pdf;
	
	/**
	 * The business object that stores the content will be rendered to Markdown
	 * 
	 * @var DAO
	 */
	private $BO = null;
	
	/**
	 * The auto-generated name of the PDF cache file for the BO
	 * 
	 * @var string
	 */
	private $PDFFilename;
	
	/**
	 * The auto-generated name of the HTML cache file for the BO generated by Markdown
	 * 
	 * @var string
	 */
	private $HTMLFilename;
	
	/**
	 * The constructor
	 * 
	 * @param object $BO the business object that stores the content will be rendered to Markdown
	 */
	public function __construct($BO) {
		global $config;
		
		$this->BO = $BO;
		$this->PDFFilename = $config->get('sysRoot').'alpha/cache/pdf/'.get_class($this->BO).'_'.$this->BO->getID().'_'.$this->BO->getVersion().'.pdf';
		$PDFDownloadName = str_replace(' ', '_', $this->BO->get('title').'.pdf');
		$this->HTMLFilename = $config->get('sysRoot').'alpha/cache/html/'.get_class($this->BO).'_'.$this->BO->getID().'_'.$this->BO->getVersion().'.html';
		
		// first check the PDF cache, and if its there then re-direct to the file
		if($this->checkPDFCache())
			$this->serveCachedPDF($PDFDownloadName);
		
		if(get_class($this->BO) == 'article_object')
			$attachURL = $this->BO->getAttachmentsURL();
		else
			$attachURL = '';
		
		if ($this->checkHTMLCache()) {
			$this->loadHTMLCache();
		}else{
			$this->content = $this->markdown($this->BO->get('content', true), $attachURL);
			$this->HTMLCache();
		}
		
		define('FPDF_FONTPATH','font/');
		$this->pdf = new AlphaFPDF();		
		$this->pdf->AddPage();
		$this->pdf->SetFont('Arial','',10);
		
		// add the title
		$title = '<h1>'.$this->BO->get('title').'</h1>';
		// add some custom footer info about the article		
		$footer = '<br><p>Article URL: <a href="'.$this->BO->get('URL').'">'.$this->BO->get('URL').'</a><br>Title: '.$this->BO->get('title').'<br>Author: '.$this->BO->get('author').'</p>';
		
		// write the title
		$this->pdf->writeHTML($title);
		$this->pdf->writeHTML($this->content);
		// write the article footer
		$this->pdf->writeHTML($footer);
		
		// save this PDF to the cache
		$this->pdf->Output($this->PDFFilename, 'F');
		$this->serveCachedPDF($PDFDownloadName);
	}
	
	/**
	 * Facade method which will invoke our custom markdown class rather than the standard one
	 */
	 private function markdown($text, $attachURL='') {
	 	global $config;
	 	
		/*
		 * Initialize the parser and return the result of its transform method.
		 * 
		 */		
		static $parser;
		if (!isset($parser)) {
			$parser_class = 'AlphaMarkdown';
			$parser = new $parser_class;
		}
		
		/*
		 * Replace all instances of $attachURL in the text with the actual URL for the article's 
		 * attachment directory
		 * 
		 */
		$text = str_replace('$attachURL', $attachURL, $text);
		
		/*
		 * Replace all instances of $sysURL in the text with the sysURL setting from config
		 * 
		 */
		$text = str_replace('$sysURL', $config->get('sysURL'), $text);
		
		// transform text using parser.
		return $parser->transform($text);
	}
	
	/**
	 * Fetter for the content
	 * 
	 * @return string HTML rendered the content
	 */
	public function getContent() {
		return $this->content;
	}
	
	/**
	 * saves the HTML generated by Markdown to the cache directory	 
	 */
	private function HTMLCache() {
		// check to ensure that the article is not transient before caching it
		if ($this->BO->getID() != '00000000000') {
			$fp=fopen($this->HTMLFilename,"w");
			if (!$fp) {
				throw new AlphaException('Failed to open the cache file for writing, directory permissions my not be set correctly!');
			}else{
				flock($fp,2); // locks the file for writting		    
				fwrite($fp,$this->content); 
				flock($fp,3); // unlocks the file
				fclose($fp); //closes the file
			}
		}
	}
	
	/**
	 * Used to check the HTML cache for the BO cache file
	 * 	 
	 * @return bool true if the file exists, false otherwise
	 */
	private function checkHTMLCache() {
		global $config;
		
		/*
		 * we can't use the HTML cahce contents if sysCMSImagesWidget is set to true, because images will
		 * be Javascript calls to insertImage rather than regular HTML tags that the PDF parser understands
		 */
		if(!$config->get('sysCMSImagesWidget'))
			return file_exists($this->HTMLFilename);
	}
	
	/**
	 * Method to load the content of the cache file to the $content attribute of this object	 
	 */
	private function loadHTMLCache() {		
		$fp=fopen($this->HTMLFilename,"r");
		if (!$fp) {
			throw new AlphaException('Failed to open the cache file for reading, directory permissions my not be set correctly!' ,'loadHTMLCache()');
		}else{				    
			$this->content = fread($fp, filesize($this->HTMLFilename));			
			fclose($fp); //closes the file			
		}
	}
	
	/**
	 * Used to check the PDF cache for the BO cache file
	 * 	 
	 * @return bool true if the file exists, false otherwise
	 */
	private function checkPDFCache() {
		return file_exists($this->PDFFilename);
	}
	
	/**
	 * Used to serve the cached PDF file as a download
	 */
	private function serveCachedPDF($name) {
		// first load the file
		$handle = fopen ($this->PDFFilename, 'r'); 
		$data = fread($handle, filesize($this->PDFFilename));
		fclose($handle);
		
		$filesize = strlen($data);
	    $mimetype = 'application/octet-stream';
	    	
	    // Start sending headers
	    header("Pragma: public"); // required
	    header("Expires: 0");
	    header("Cache-Control: must-revalidate, post-check=0, pre-check=0");
	    header("Cache-Control: private",false); // required for certain browsers
	    header("Content-Transfer-Encoding: binary");
	    header("Content-Type: " . $mimetype);
	    header("Content-Length: " . $filesize);
	    header("Content-Disposition: attachment; filename=\"" . $name . "\";" );
	
	    // Send data
	    echo $data;
	    die();
	}
}
?>