<?php

// $Id$

require_once $config->get('sysRoot').'alpha/util/alpha_fpdf.inc';

/**
 *
 * A facade class for the FDPF library which is used to convert some HTML content provided by the
 * Markdown library to a PDF file using FPDF
 * 
 * @package Alpha Util
 * @author John Collins <john@design-ireland.net>
 * @copyright 2007 John Collins
 * @todo need to add PDF cache support methods!
 * 
 */
 
class fpdf_facade
{
	/**
	 * the markdown-format content that we will render as a PDF
	 * @var string
	 */	
	var $content;
	
	/**
	 * the PDF object that will be generated from the Markdown HTML content
	 * @var alpha_pdf
	 */
	var $pdf;
	
	/**
	 * the business object that stores the content will be rendered to Markdown
	 * @var object
	 */
	var $BO = null;
	
	/**
	 * the auto-generated name of the PDF cache file for the BO
	 * @var string
	 */
	var $pdf_filename;
	
	/**
	 * the auto-generated name of the HTML cache file for the BO generated by Markdown
	 * @var string
	 */
	var $html_filename;
	
	/**
	 * the constructor
	 * @param object $BO the business object that stores the content will be rendered to Markdown
	 */
	function fpdf_facade($BO) {
		global $config;
		
		$this->BO = $BO;
		$this->pdf_filename = $config->get('sysRoot').'cache/pdf/'.get_class($this->BO).'_'.$this->BO->get_ID().'_'.$this->BO->get_version().'.pdf';
		$pdf_download_name = str_replace(' ', '_', $this->BO->get("title").'.pdf');
		$this->html_filename = $config->get('sysRoot').'cache/html/'.get_class($this->BO).'_'.$this->BO->get_ID().'_'.$this->BO->get_version().'.html';
		
		// first check the PDF cache, and if its there then re-direct to the file
		if($this->check_pdf_cache())
			$this->serve_cached_pdf($pdf_download_name);
		
		if(get_class($this->BO) == "article_object")
			$attachURL = $this->BO->get_attachments_URL();
		else
			$attachURL = "";
		
		if ($this->check_html_cache()) {
			$this->load_html_cache();
		}else{
			$this->content = $this->markdown($this->BO->get("content", true), $attachURL);
			$this->html_cache();
		}
		
		define('FPDF_FONTPATH','font/');
		$this->pdf = new alpha_fpdf();		
		$this->pdf->AddPage();
		$this->pdf->SetFont('Arial','',10);
		// add some custom footer info about the article
		$footer = '<br><p>Article URL: <a href="'.$this->BO->URL.'">'.$this->BO->URL.'</a><br>Title: '.$this->BO->get("title").'<br>Author: '.$this->BO->get("author").'</p>';
		$this->pdf->writeHTML($this->content);
		// write the article footer
		$this->pdf->writeHTML($footer);		
		
		// save this PDF to the cache
		$this->pdf->Output($this->pdf_filename, "F");
		$this->serve_cached_pdf($pdf_download_name);
	}
	
	/**
	 * facade method which will invoke our custom markdown class rather than the standard one
	 */
	 function markdown($text, $attachURL="") {
	 	global $config;
	 	
		/*
		 * Initialize the parser and return the result of its transform method.
		 * 
		 */		
		static $parser;
		if (!isset($parser)) {
			$parser_class = "alpha_markdown";
			$parser = new $parser_class;
		}
		
		/*
		 * Replace all instances of $attachURL in the text with the actual URL for the article's 
		 * attachment directory
		 * 
		 */
		$text = str_replace('$attachURL', $attachURL, $text);
		
		/*
		 * Replace all instances of $sysURL in the text with the sysURL setting from config
		 * 
		 */
		$text = str_replace('$sysURL', $config->get('sysURL'), $text);
		
		// transform text using parser.
		return $parser->transform($text);
	}
	
	/**
	 * getter for the content
	 * @return string HTML rendered the content
	 */
	function get_content() {
		return $this->content;
	}
	
	/**
	 * saves the HTML generated by Markdown to the cache directory	 
	 */
	function html_cache() {
		// check to ensure that the article is not transient before caching it
		if ($this->BO->get_Id() != "00000000000") {
			$fp=fopen($this->html_filename,"w");
			if (!$fp) {
				$error = new handle_error($_SERVER["PHP_SELF"],'Failed to open the cache file for writing, directory permissions my not be set correctly!' ,'html_cache()','framework');
			}else{
				flock($fp,2); // locks the file for writting		    
				fwrite($fp,$this->content); 
				flock($fp,3); // unlocks the file
				fclose($fp); //closes the file
			}
		}
	}
	
	/**
	 * used to check the HTML cache for the BO cache file	 
	 * @return bool true if the file exists, false otherwise
	 */
	function check_html_cache() {
		global $config;
		
		/*
		 * we can't use the HTML cahce contents if sysCMSImagesWidget is set to true, because images will
		 * be Javascript calls to insertImage rather than regular HTML tags that the PDF parser understands
		 */
		if(!$config->get('sysCMSImagesWidget'))
			return file_exists($this->html_filename);
	}
	
	/**
	 * method to load the content of the cache file to the $content attribute of this object	 
	 */
	function load_html_cache() {		
		$fp=fopen($this->html_filename,"r");
		if (!$fp) {
			$error = new handle_error($_SERVER["PHP_SELF"],'Failed to open the cache file for reading, directory permissions my not be set correctly!' ,'load_html_cache()','framework');
		}else{				    
			$this->content = fread($fp, filesize($this->html_filename));			
			fclose($fp); //closes the file			
		}
	}
	
	/**
	 * used to check the PDF cache for the BO cache file	 
	 * @return bool true if the file exists, false otherwise
	 */
	function check_pdf_cache() {
		return file_exists($this->pdf_filename);
	}
	
	/**
	 * used to serve the cached PDF file as a download
	 */
	function serve_cached_pdf($name) {
		// first load the file
		$handle = fopen ($this->pdf_filename, 'r'); 
		$data = fread($handle, filesize($this->pdf_filename));
		fclose($handle);
		
		$filesize = strlen($data);
	    $mimetype = 'application/octet-stream';
	    	
	    // Start sending headers
	    header("Pragma: public"); // required
	    header("Expires: 0");
	    header("Cache-Control: must-revalidate, post-check=0, pre-check=0");
	    header("Cache-Control: private",false); // required for certain browsers
	    header("Content-Transfer-Encoding: binary");
	    header("Content-Type: " . $mimetype);
	    header("Content-Length: " . $filesize);
	    header("Content-Disposition: attachment; filename=\"" . $name . "\";" );
	
	    // Send data
	    echo $data;
	    die();
	}
}
?>