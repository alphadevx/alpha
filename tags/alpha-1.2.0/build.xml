<?xml version="1.0" encoding="UTF-8"?>

<project name="AlphaFramework" default="init" basedir=".">

  	<!-- Creates a new release of the Alpha Framework -->
    <target name="releaseAlpha" depends="init, moveOldDocs, generateDocs">

        <exec command="svn add docs/api/current" />

        <version releasetype="${releasetype}" file="VERSION.txt" property="alpha.version.new" />
    	  <echo message="New version number is ${alpha.version.new}" />

        <svncommit
            svnpath="/usr/bin/svn"
            username="${svn.username}"
            password="${svn.password}"
            nocache="true"
            workingcopy="."
            message="Added new API docs to docs/api/current and updated the VERSION.txt value to ${alpha.version.new}" />

        <svncopy
           svnpath="/usr/bin/svn"
           username="${svn.username}"
           password="${svn.password}"
           force="true"
           nocache="true"
           message="Creating the new tag tags/alpha-${alpha.version.new}"
           repositoryurl="${svn.repo.url}/trunk"
           todir="${svn.repo.url}/tags/alpha-${alpha.version.new}" />

        <phingcall target="buildAlphaReleaseArtifact" />

    </target>

  	<!-- Moves the latest API docs into a backup directory named to match the current version (VERSION.txt) -->
    <target name="moveOldDocs">
        <exec command="svn mv docs/api/current docs/api/${alpha.version.old}" />

        <svncommit
            svnpath="/usr/bin/svn"
            username="${svn.username}"
            password="${svn.password}"
            nocache="true"
            workingcopy="."
            message="Moved the old API docs to docs/api/${alpha.version.old}" />

    </target>

  	<!-- Builds the version .zip file containing the Alpha Framework code -->
  	<target name="buildAlphaReleaseArtifact" depends="clean">

	    <svnexport
	        svnpath="/usr/bin/svn"
	        username="${svn.username}"
	        password="${svn.password}"
	        force="true"
	        nocache="true"
	        repositoryurl="${svn.repo.url}/trunk"
	        todir="${build.dir}" />

	    <mkdir dir="${artifacts.dir}" />

	    <zip destfile="${artifacts.dir}/alpha-${alpha.version.new}.zip">
	      	<fileset dir="${build.dir}">
	        	<include name="**/**" />
	      	</fileset>
	    </zip>

  	</target>

  	<!-- Loads the properties file specified in the command line arguements -->
  	<target name="init">
	    <if>
	      	<not><isset property="propfile"/></not>
	      	<then>
	        	<fail message="No properties file specified.  Try again with 'phing -Dpropfile=/path/to/build.*.properties -Dreleasetype=Major|Minor|Bugfix'" />
	      	</then>
	      	<else>
	        	<echo message="Using properties file ${propfile}" />
	        	<property file="${propfile}" />
	      	</else>
	    </if>

	    <if>
	      	<not><isset property="releasetype"/></not>
	      	<then>
	        	<fail message="No releasetype specified.  Try again with 'phing -Dpropfile=/path/to/build.*.properties -Dreleasetype=Major|Minor|Bugfix'" />
	      	</then>
	      	<else>
	          	<loadfile property="alpha.version.old" file="VERSION.txt" />
	           	<echo message="Old version number is ${alpha.version.old}" />
	      	</else>
	    </if>
  	</target>

  	<!-- Loads the properties file specified in the command line arguements -->
  	<target name="deployInit">
	    <if>
	      	<not><isset property="propfile"/></not>
	      	<then>
	        	<fail message="No properties file specified.  Try again with 'phing -Dpropfile=/path/to/build.*.properties'" />
	      	</then>
	      	<else>
	        	<echo message="Using properties file ${propfile}" />
	        	<property file="${propfile}" />
	      	</else>
	    </if>

	    <loadfile property="app.version" file="../VERSION.txt" />
	    <echo message="App version number is ${app.version}" />

  	</target>

	  <!-- Cleans out the previous build folder -->
	  <target name="clean">
	    <echo msg="Cleaing out any previous build...." />
	    <delete dir="${build.dir}" />
	  </target>

  	<!-- Generates new API docs for the Alpha Framework using ApiGen -->
  	<target name="generateDocs">

	    <apigen
	      source="."
	      destination="docs/api/current"
	      exclude="*/.svn/*,*/lib/*"
	      title="Alpha Framework API Documentation"
        templateconfig="docs/apigen-template/config.neon"
	      deprecated="true"
	      php="no"
	      download="no"
	      extensions="inc,php"
	      accesslevels="public,private,protected"
	      allowedhtml="b,i,a,ul,ol,li,p,br,var,samp,kbd,tt,pre"
	      todo="false" />

  	</target>

  	<!-- deploys the source to the target server(s) -->
    <target name="appDeploy" depends="deployInit, clean">

    	<mkdir dir="${build.dir}" />

        <tar destfile="${build.dir}/release.${app.version}.tar.gz" compression="gzip">
            <fileset dir="../">
                <exclude name="**/.svn/**" />
            </fileset>
        </tar>

        <phingcall target="appDeployRemote" />

    </target>

    <!-- deploys the bundled .tar.gz to the target server -->
    <target  name="appDeployRemote">

        <echo  msg="Deploying to server: (${target.server})"  />

        <!-- Create the target dir on the remote server -->
        <ssh username="${target.server.user}" password="${target.server.password}" host="${target.server}" port="${target.server.port}" command="mkdir ${target.server.dest.dir}/${app.version}" />

        <!-- Copy up the .tar.gz into the target dir on the remote server -->
        <scp username="${target.server.user}" password="${target.server.password}" host="${target.server}" port="${target.server.port}" todir="${target.server.dest.dir}/${app.version}" file="${build.dir}/release.${app.version}.tar.gz"/>

        <!-- Un-tar the remote .tar.gz file -->
        <ssh username="${target.server.user}" password="${target.server.password}" host="${target.server}" port="${target.server.port}" command="tar -C ${target.server.dest.dir}/${app.version} -zxvf ${target.server.dest.dir}/${app.version}/release.${app.version}.tar.gz > /dev/null" />

        <!-- Remove the remote .tar.gz file -->
        <ssh username="${target.server.user}" password="${target.server.password}" host="${target.server}" port="${target.server.port}" command="rm -f ${target.server.dest.dir}/${app.version}/release.${app.version}.tar.gz" />

        <!-- Change group ownership on the extracted files to nginx -->
        <ssh username="${target.server.user}" password="${target.server.password}" host="${target.server}" port="${target.server.port}" command="chgrp -R apache ${target.server.dest.dir}/${app.version}"  />

        <!-- Point the /var/www/current symlink to the new version -->
        <ssh username="${target.server.user}" password="${target.server.password}" host="${target.server}"  port="${target.server.port}" command="rm -f /var/www/current; ln -s ${target.server.dest.dir}/${app.version} /var/www/current" />

    </target>

</project>